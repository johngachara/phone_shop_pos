import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Precache assets generated by VitePWA
precacheAndRoute(self.__WB_MANIFEST);

// Google APIs and Firebase requests
registerRoute(
    ({ url }) => url.hostname.includes('googleapis.com') || url.hostname.includes('gstatic.com'),
    new NetworkFirst({
        cacheName: 'google-apis',
        plugins: [
            new ExpirationPlugin({ maxEntries: 20, maxAgeSeconds: 24 * 60 * 60 }),
            new CacheableResponsePlugin({ statuses: [0, 200] }),
        ],
    })
);

// Google user content (profile pictures, etc.)
registerRoute(
    ({ url }) => url.hostname.includes('lh3.googleusercontent.com'),
    new CacheFirst({
        cacheName: 'google-user-content',
        plugins: [
            new ExpirationPlugin({ maxEntries: 50, maxAgeSeconds: 7 * 24 * 60 * 60 }),
            new CacheableResponsePlugin({ statuses: [0, 200] }),
        ],
    })
);

// Static assets
registerRoute(
    ({ request }) => ['style', 'script', 'worker'].includes(request.destination),
    new StaleWhileRevalidate({
        cacheName: 'static-resources',
    })
);

// Images
registerRoute(
    ({ request }) => request.destination === 'image',
    new CacheFirst({
        cacheName: 'images',
        plugins: [
            new ExpirationPlugin({ maxEntries: 60, maxAgeSeconds: 30 * 24 * 60 * 60 }),
            new CacheableResponsePlugin({ statuses: [0, 200] }),
        ],
    })
);



self.addEventListener('fetch', (event) => {
    event.respondWith(
        fetch(event.request).then((response) => {
            // Clone the response and return it without caching
            return response.clone();
        }).catch((error) => {
            console.error('Network error occurred, request failed:', event.request.url, error);
            return new Response('Network error occurred', { status: 408 });
        })
    );
});

self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cache) => caches.delete(cache))
            );
        })
    );
});
